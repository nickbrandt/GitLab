import { shallowMount } from '@vue/test-utils';
import VulnerabilityCountList from 'ee/security_dashboard/components/vulnerability_count_list.vue';
import VulnerabilityCountListLayout from 'ee/security_dashboard/components/vulnerability_count_list_layout.vue';
import eventHub from 'ee/security_dashboard/utils/event_hub';

describe('Vulnerabilities count list component', () => {
  let wrapper;
  let refetchSpy;

  const findVulnerabilityLayout = () => wrapper.find(VulnerabilityCountListLayout);

  const createWrapper = ({ query = { isLoading: false }, props = { scope: 'project' } } = {}) => {
    refetchSpy = jest.fn();

    return shallowMount(VulnerabilityCountList, {
      propsData: props,
      mocks: {
        $apollo: { queries: { vulnerabilitiesCount: { ...query, refetch: refetchSpy } } },
      },
    });
  };

  afterEach(() => {
    wrapper.destroy();
  });

  describe('when loading', () => {
    it('passes down to the loading indicator', () => {
      wrapper = createWrapper({ query: { loading: true } });
      expect(findVulnerabilityLayout().props('isLoading')).toBe(true);
    });
  });

  describe('when counts are loaded', () => {
    beforeEach(() => {
      wrapper = createWrapper({ query: { loading: false } });
      wrapper.setData({
        vulnerabilitiesCount: {
          critical: 5,
          high: 3,
          low: 19,
          info: 4,
          medium: 2,
          unknown: 4,
        },
      });
    });

    it('sets the loading indicator false and passes it down', () => {
      expect(findVulnerabilityLayout().props('isLoading')).toBe(false);
    });

    it('should load the vulnerabilities and pass them down to the layout', () => {
      expect(findVulnerabilityLayout().props('vulnerabilitiesCount')).toEqual({
        critical: 5,
        high: 3,
        low: 19,
        info: 4,
        medium: 2,
        unknown: 4,
      });
    });

    it('refetches the query when vulnerabilities-updated event is triggered', () => {
      eventHub.$emit('vulnerabilities-updated', wrapper.vm);
      expect(refetchSpy).toHaveBeenCalled();
    });
  });

  describe.each`
    givenScope    | expectedContainedQueryVariables
    ${'instance'} | ${{ isInstance: true, isGroup: false, isProject: false }}
    ${'group'}    | ${{ isInstance: false, isGroup: true, isProject: false }}
    ${'project'}  | ${{ isInstance: false, isGroup: false, isProject: true }}
  `(
    'when the scope prop is set to "$givenScope"',
    ({ givenScope, expectedContainedQueryVariables }) => {
      beforeEach(() => {
        wrapper = createWrapper({ props: { scope: givenScope } });
        return wrapper.vm.$nextTick();
      });

      it('should pass the correct variables to the GraphQL query', () => {
        expect(
          wrapper.vm.$options.apollo.vulnerabilitiesCount.variables.call(wrapper.vm),
        ).toMatchObject(expectedContainedQueryVariables);
      });
    },
  );

  describe('when there is an error', () => {
    beforeEach(() => {
      wrapper = createWrapper({ query: {} });
      wrapper.setData({ queryError: true });
    });

    it('should tell the layout to display an error', () => {
      expect(findVulnerabilityLayout().props('showError')).toBe(true);
    });
  });
});
