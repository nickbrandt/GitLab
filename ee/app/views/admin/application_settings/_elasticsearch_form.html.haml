- return unless License.feature_available?(:elastic_search)

- elastic_helper = Gitlab::Elastic::Helper.default
- elasticsearch_available = elastic_helper.ping?

%section.settings.as-elasticsearch.no-animate#js-elasticsearch-settings{ class: ('expanded' if expanded_by_default?), data: { qa_selector: 'elasticsearch_tab' } }
  .settings-header
    %h4
      = _('Advanced Search')
    %button.btn.gl-button.btn-default.js-settings-toggle{ type: 'button', data: { qa_selector: 'expand_advanced_search_button' } }
      = expanded_by_default? ? _('Collapse') : _('Expand')
    %p
      = _('Configure settings for Advanced Search with Elasticsearch.')

  .settings-content
    = form_for @application_setting, url: advanced_search_admin_application_settings_path(anchor: 'js-elasticsearch-settings'), html: { class: 'fieldset-form' } do |f|
      = form_errors(@application_setting)

      %fieldset
        .gl-card.gl-bg-gray-10.gl-mb-6
          .gl-card-body
            - halted_migrations = elasticsearch_available && Elastic::DataMigrationService.halted_migrations?
            - if halted_migrations
              .gl-alert.gl-alert-warning.gl-mt-3.gl-mb-3{ role: 'alert' }
                = sprite_icon('warning', css_class: 'gl-icon gl-alert-icon gl-alert-icon-no-title')
                %button.js-close.gl-alert-dismiss{ type: 'button', 'aria-label' => _('Dismiss') }
                  = sprite_icon('close', css_class: 'gl-icon')
                .gl-alert-body
                  %h4.gl-alert-title= _('There is a halted Elasticsearch migration')
                  = html_escape_once(_('Check the elasticsearch.log file to debug why the migration was halted and make any changes before retrying the migration. When you fix the cause of the failure, click "Retry migration", and the migration will be scheduled to be retried in the background.')).html_safe
                  = link_to _('Learn more.'), help_page_path('integration/elasticsearch', anchor: 'advanced-search-migrations')
                .gl-alert-actions
                  - migration = Elastic::DataMigrationService.halted_migration
                  = link_to _('Retry migration'), admin_elasticsearch_retry_migration_path(version: migration.version), class: 'btn gl-alert-action btn-warning gl-button', disabled: @last_elasticsearch_reindexing_task&.in_progress?, data: { confirm: _('Are you sure you want to retry this migration?') }, method: :post

            .form-group
              .form-check
                = f.check_box :elasticsearch_indexing, class: 'form-check-input', data: { qa_selector: 'indexing_checkbox' }
                = f.label :elasticsearch_indexing, class: 'form-check-label' do
                  = _('Elasticsearch indexing')
                - unless Gitlab::CurrentSettings.elasticsearch_indexing?
                  .form-text.gl-text-gray-600.gl-mt-0
                    = _('An empty index will be created if one does not already exist')
                - if Gitlab::CurrentSettings.elasticsearch_indexing?
                  .form-text
                    = link_to _('Index all projects'), admin_elasticsearch_enqueue_index_path,
                        class: ['gl-button', 'btn', 'btn-confirm'], method: :post

            .gl-card-body
              .form-group
                .form-check
                - first_pending_migration = Elastic::DataMigrationService.pending_migrations.first if elasticsearch_available
                - pending_migration_running_and_pauses_indexing = first_pending_migration&.running? && first_pending_migration&.pause_indexing?
                - disable_checkbox = !Gitlab::CurrentSettings.elasticsearch_indexing? || pending_migration_running_and_pauses_indexing || @last_elasticsearch_reindexing_task&.in_progress?
                = f.check_box :elasticsearch_pause_indexing, class: 'form-check-input', data: { qa_selector: 'pause_checkbox' }, disabled: disable_checkbox
                = f.label :elasticsearch_pause_indexing, class: 'form-check-label' do
                  = _('Pause Elasticsearch indexing')
                .form-text.gl-text-gray-600.gl-mt-0
                  = _('Changes are still tracked. Useful for cluster/index migrations.')
                - if pending_migration_running_and_pauses_indexing
                  .form-text.text-warning
                    = _('There are pending advanced search migrations which require indexing to be paused. Indexing must remain paused until the migrations are completed.')

            .form-group
              .form-check
                = f.check_box :elasticsearch_search, class: 'form-check-input', data: { qa_selector: 'search_checkbox' }
                = f.label :elasticsearch_search, class: 'form-check-label' do
                  Search with Elasticsearch enabled

            .form-group
              = f.label :elasticsearch_url, 'URL', class: 'label-bold'
              = f.text_field :elasticsearch_url, value: @application_setting.elasticsearch_url.join(', '), class: 'form-control gl-form-input', placeholder: 'http://localhost:9200', data: { qa_selector: 'url_field' }
              .form-text.gl-text-gray-600.gl-mt-0
                = _('The URL to use for connecting to Elasticsearch. Use a comma-separated list to support clustering (e.g., "http://localhost:9200, http://localhost:9201").')

            .form-group
              = f.label :elasticsearch_username, _('Username (for password-protected Elasticsearch servers)'), class: 'label-bold'
              = f.text_field :elasticsearch_username, value: @application_setting.elasticsearch_username, class: 'form-control gl-form-input', data: { qa_selector: 'username_field' }
            .form-group
              = f.label :elasticsearch_password, _('Password (for password-protected Elasticsearch servers)'), class: 'label-bold'
              = f.password_field :elasticsearch_password, value: (@application_setting.elasticsearch_password.present? ? ApplicationSetting::MASK_PASSWORD : ''), class: 'form-control gl-form-input', data: { qa_selector: 'password_field' }

            .form-group
              = f.label :elasticsearch_shards, _('Number of Elasticsearch shards and replicas (per index)'), class: 'gl-font-weight-bold'

            %table.table
              %thead
                %tr
                  %th= _('Index')
                  %th= _('Number of shards')
                  %th= _('Number of replicas')
              %tbody
                - Elastic::IndexSetting.every_alias do |setting|
                  %tr
                    %td= setting.alias_name
                    %td
                      = f.number_field :elasticsearch_shards, name: "application_setting[elasticsearch_shards][#{setting.alias_name}]", value: setting.number_of_shards, class: 'form-control gl-form-input', id: "application_setting_elasticsearch_shards[#{setting.alias_name}]"
                    %td
                      = f.number_field :elasticsearch_replicas, name: "application_setting[elasticsearch_replicas][#{setting.alias_name}]", value: setting.number_of_replicas, class: 'form-control gl-form-input', id: "application_setting_elasticsearch_replicas[#{setting.alias_name}]"
            .form-group
              .form-text.gl-text-gray-600.gl-mt-0
                - configuration_link_url = help_page_url('integration/elasticsearch.md', anchor: 'advanced-search-configuration')
                - configuration_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: configuration_link_url }
                - recreated_link_url = help_page_url('integration/elasticsearch.md', anchor: 'zero-downtime-reindexing')
                - recreated_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: recreated_link_url }
                = _("Learn more about shards and replicas in the %{configuration_link_start}Advanced search configuration%{configuration_link_end} documentation. Changes won't take place until the index is %{recreated_link_start}recreated%{recreated_link_end}.").html_safe % { configuration_link_start: configuration_link_start, configuration_link_end: '</a>'.html_safe, recreated_link_start: recreated_link_start, recreated_link_end: '</a>'.html_safe }

            .form-group
              = f.label :elasticsearch_indexed_file_size_limit_kb, _('Maximum file size indexed (KiB)'), class: 'label-bold'
              = f.number_field :elasticsearch_indexed_file_size_limit_kb, value: @application_setting.elasticsearch_indexed_file_size_limit_kb, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('Any files larger than this limit will not be indexed, and thus will not be searchable.')

            .form-group
              = f.label :elasticsearch_indexed_field_length_limit, _('Maximum field length'), class: 'label-bold'
              = f.number_field :elasticsearch_indexed_field_length_limit, value: @application_setting.elasticsearch_indexed_field_length_limit, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('If any indexed field exceeds this limit it will be truncated to this number of characters and the rest will not be indexed or searchable. This does not apply to repository and wiki indexing. Setting this to 0 means it is unlimited.')

            .form-group
              = f.label :elasticsearch_max_bulk_size_mb, _('Maximum bulk request size (MiB)'), class: 'label-bold'
              = f.number_field :elasticsearch_max_bulk_size_mb, value: @application_setting.elasticsearch_max_bulk_size_mb, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('Maximum size of Elasticsearch bulk indexing requests.')
                = _('This only applies to repository indexing operations.')

            .form-group
              = f.label :elasticsearch_max_bulk_concurrency, _('Bulk request concurrency'), class: 'label-bold'
              = f.number_field :elasticsearch_max_bulk_concurrency, value: @application_setting.elasticsearch_max_bulk_concurrency, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('Maximum concurrency of Elasticsearch bulk requests per indexing operation.')
                = _('This only applies to repository indexing operations.')

            .form-group
              = f.label :elasticsearch_client_request_timeout, _('Client request timeout'), class: 'label-bold'
              = f.number_field :elasticsearch_client_request_timeout, value: @application_setting.elasticsearch_client_request_timeout, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('Elasticsearch HTTP client timeout value in seconds.')
                = _('Setting this to 0 means using the system default timeout value.')

        .gl-card.gl-bg-gray-10.gl-mb-6
          .gl-card-body
            %h4= _('Elasticsearch indexing restrictions')
            .form-group
              .form-check
                = f.check_box :elasticsearch_limit_indexing, class: 'form-check-input js-limit-checkbox'
                = f.label :elasticsearch_limit_indexing, class: 'form-check-label' do
                  = _('Limit namespaces and projects that can be indexed')

            .form-group.js-limit-namespaces{ class: ('hidden' unless @application_setting.elasticsearch_limit_indexing) }
              = f.label :elasticsearch_namespace_ids, _('Namespaces to index'), class: 'label-bold'
              - if elasticsearch_too_many_namespaces?
                %p= _('Too many namespaces enabled. You will need to manage them via the console or the API.')
              - else
                = f.text_field :elasticsearch_namespace_ids, class: 'js-elasticsearch-namespaces', value: elasticsearch_namespace_ids, data: { selected: elasticsearch_objects_options(@application_setting.elasticsearch_limited_namespaces(true)).to_json }

            .form-group.js-limit-projects{ class: ('hidden' unless @application_setting.elasticsearch_limit_indexing) }
              = f.label :elasticsearch_project_ids, _('Projects to index'), class: 'label-bold'
              - if elasticsearch_too_many_projects?
                %p= _('Too many projects enabled. You will need to manage them via the console or the API.')
              - else
                = f.text_field :elasticsearch_project_ids, class: 'js-elasticsearch-projects', value: elasticsearch_project_ids, data: { selected: elasticsearch_objects_options(@application_setting.elasticsearch_limited_projects(true)).to_json }

        .gl-card.gl-bg-gray-10.gl-mb-6
          .gl-card-body
            %h4= _('Custom analyzers: language support')
            %h5
              = _('Chinese language support using')
              %a{ href: 'https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-smartcn.html' }
                = _('smartcn custom analyzer')
            .form-group
              .form-check
                = f.check_box :elasticsearch_analyzers_smartcn_enabled, class: 'form-check-input'
                = f.label :elasticsearch_analyzers_smartcn_enabled, class: 'form-check-label' do
                  = _('Enable smartcn custom analyzer: Indexing')
            .form-group
              .form-check
                = f.check_box :elasticsearch_analyzers_smartcn_search, class: 'form-check-input', disabled: !Gitlab::CurrentSettings.elasticsearch_analyzers_smartcn_enabled?
                = f.label :elasticsearch_analyzers_smartcn_search, class: 'form-check-label' do
                  = _('Enable smartcn custom analyzer: Search')
                .form-text.gl-text-gray-600
                  = _('Please only enable search after installing the plugin, enabling indexing and recreating the index')
            %h5
              = _('Japanese language support using')
              %a{ href: 'https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-kuromoji.html' }
                = _('kuromoji custom analyzer')
            .form-group
              .form-check
                = f.check_box :elasticsearch_analyzers_kuromoji_enabled, class: 'form-check-input'
                = f.label :elasticsearch_analyzers_kuromoji_enabled, class: 'form-check-label' do
                  = _('Enable kuromoji custom analyzer: Indexing')
            .form-group
              .form-check
                = f.check_box :elasticsearch_analyzers_kuromoji_search, class: 'form-check-input', disabled: !Gitlab::CurrentSettings.elasticsearch_analyzers_kuromoji_enabled?
                = f.label :elasticsearch_analyzers_kuromoji_search, class: 'form-check-label' do
                  = _('Enable kuromoji custom analyzer: Search')
                .form-text.gl-text-gray-600
                  = _('Please only enable search after installing the plugin, enabling indexing and recreating the index')

        .gl-card.gl-bg-gray-10.gl-mb-6
          .gl-card-body
            %h4= _('Elasticsearch AWS IAM credentials')
            .form-group
              .form-check
                = f.check_box :elasticsearch_aws, class: 'form-check-input'
                = f.label :elasticsearch_aws, class: 'form-check-label' do
                  Using AWS hosted Elasticsearch with IAM credentials
            .form-group
              = f.label :elasticsearch_aws_region, 'AWS region', class: 'label-bold'
              = f.text_field :elasticsearch_aws_region, value: @application_setting.elasticsearch_aws_region, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('Region that Elasticsearch is configured')

            .form-group
              = f.label :elasticsearch_aws_access_key, _('AWS Access Key'), class: 'label-bold'
              = f.text_field :elasticsearch_aws_access_key, value: @application_setting.elasticsearch_aws_access_key, class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('AWS Access Key. Only required if not using role instance credentials')

            - secret_access_key_label = @application_setting.elasticsearch_aws_secret_access_key.present? ? _('Enter new AWS Secret Access Key') : _('AWS Secret Access Key')
            .form-group
              = f.label :elasticsearch_aws_secret_access_key, secret_access_key_label, class: 'label-bold'
              = f.password_field :elasticsearch_aws_secret_access_key, autocomplete: 'new-password', class: 'form-control gl-form-input'
              .form-text.gl-text-gray-600.gl-mt-0
                = _('AWS Secret Access Key. Only required if not using role instance credentials')

      = f.submit _('Save changes'), class: "gl-button btn btn-confirm", data: { qa_selector: 'submit_button' }

%section.settings.as-elasticsearch-reindexing.no-animate#js-elasticsearch-reindexing{ class: ('expanded' if expanded_by_default?) }
  .settings-header
    %h4
      = _('Elasticsearch zero-downtime reindexing')
    %button.btn.gl-button.btn-default.js-settings-toggle{ type: 'button' }
      = expanded_by_default? ? _('Collapse') : _('Expand')
    %p
      = _('Trigger cluster reindexing. This feature should be used with an index that was created after 13.0.')

  .settings-content
    = form_for @elasticsearch_reindexing_task, url: admin_elasticsearch_trigger_reindexing_path, method: :post, html: { class: 'fieldset-form' } do |f|
      %fieldset
        .form-group
          = f.label :slice_multiplier, _('Slice multiplier'), class: 'label-bold'
          = f.number_field :elasticsearch_slice_multiplier, class: 'form-control gl-form-input', value: @elasticsearch_reindexing_task.slice_multiplier
          .form-text.gl-text-gray-600.gl-mt-0
            - slice_multiplier_link_url = help_page_path('integration/elasticsearch.md', anchor: 'slice-multiplier')
            - slice_multiplier_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: slice_multiplier_link_url }
            = _('Used to calculate the number of slices during reindexing. The multiplier will be applied to the number of shards per index. Learn more about %{slice_multiplier_link_start}slice multiplier configuration%{slice_multiplier_link_end}.').html_safe % { slice_multiplier_link_start: slice_multiplier_link_start, slice_multiplier_link_end: '</a>'.html_safe }

        .form-group
          = f.label :max_slices_running, _('Maximum running slices'), class: 'label-bold'
          = f.number_field :elasticsearch_max_slices_running, class: 'form-control gl-form-input', value: @elasticsearch_reindexing_task.max_slices_running
          .form-text.gl-text-gray-600.gl-mt-0
            - max_slices_running_link_url = help_page_path('integration/elasticsearch.md', anchor: 'maximum-running-slices')
            - max_slices_running_link_start = '<a href="%{url}" target="_blank" rel="noopener noreferrer">'.html_safe % { url: max_slices_running_link_url }
            = _('The maximum number of slices allowed to run concurrently during Elasticsearch reindexing. Learn more about %{max_slices_running_link_start}maximum running slices configuration%{max_slices_link_end}.').html_safe % { max_slices_running_link_start: max_slices_running_link_start, max_slices_link_end: '</a>'.html_safe }

        = f.submit _('Trigger cluster reindexing'), class: "gl-button btn btn-info", disabled: @last_elasticsearch_reindexing_task&.in_progress?, data: { confirm: _('Are you sure you want to reindex?') }
        .form-text.gl-text-gray-600
        - Elastic::ReindexingTask.old_indices_scheduled_for_deletion.each do |task|
          .form-text.gl-text-red-500.gl-mt-0
            = _("Unused, previous indices: %{index_names} will be deleted after %{time} automatically.") % { index_names: task.subtasks.map(&:index_name_from).join(', '), time: task.delete_original_index_at }
            = link_to _('Cancel index deletion'), admin_elasticsearch_cancel_index_deletion_path(task_id: task.id), class: 'gl-mb-2', method: :post
        - if @last_elasticsearch_reindexing_task
          %h5= _('Reindexing Status: %{status} (Slice multiplier: %{multiplier}, Maximum running slices: %{max_slices})') % { status: @last_elasticsearch_reindexing_task.state, max_slices: @last_elasticsearch_reindexing_task.max_slices_running, multiplier: @last_elasticsearch_reindexing_task.slice_multiplier }
          - if @last_elasticsearch_reindexing_task.error_message
            %p= _('Error: %{error_message}') % { error_message: @last_elasticsearch_reindexing_task.error_message }
          - @last_elasticsearch_reindexing_task.subtasks.order_by_alias_name_asc.each do |subtask|
            .gl-card-body.form-group
              %h5= subtask.alias_name
              - expected_documents = subtask.documents_count
              - if subtask.elastic_task
                %p= _('Task ID: %{elastic_task}') % { elastic_task: subtask.elastic_task }
              - if expected_documents
                - processed_documents = subtask.documents_count_target
                %p= _('Expected documents: %{expected_documents}') % { expected_documents: expected_documents }
                - if processed_documents && expected_documents
                  - percentage = ((processed_documents / expected_documents.to_f) * 100).round(2)
                  %p= _('Documents reindexed: %{processed_documents} (%{percentage}%%)') % { processed_documents: processed_documents, percentage: percentage }
                  .progress
                    .progress-bar{ "aria-valuemax" => "100", "aria-valuemin" => "0", "aria-valuenow" => percentage, :role => "progressbar", :style => "width: #{percentage}%" }
